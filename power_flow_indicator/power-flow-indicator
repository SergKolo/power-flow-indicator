#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Author: Serg Kolo , contact: 1047481448@qq.com
# Date: July 21, 2016
# Purpose: Indicator that displays power  
#          consumption of laptop battery
#
# Written for: http://askubuntu.com/q/801003/295286
# Tested on: Ubuntu 16.04 LTS
#
#
#
# Licensed under The MIT License (MIT).
# See included LICENSE file or the notice below.
#
# Copyright Â© 2016 Sergiy Kolodyazhnyy
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import gi

gi.require_version('AppIndicator3', '0.1')
from gi.repository import GLib as glib
from gi.repository import AppIndicator3 as appindicator
from gi.repository import Gtk as gtk

import os
import dbus
import subprocess
import argparse
import signal


class PowerFlowIndicator(object):
    def __init__(self, label_format):
        self.label_format = label_format
        self.icon_path = os.path.dirname(os.path.realpath(__file__))
        category = appindicator.IndicatorCategory.APPLICATION_STATUS
        init_info = ['power-flow-indicator', "", category]
        self.app = appindicator.Indicator.new(*init_info)
        self.app.set_status(appindicator.IndicatorStatus.ACTIVE)
        self.app.set_icon(os.path.join(self.icon_path, "pwi_icon.png"))

        self.app_menu = gtk.Menu()
        self.app_menu_quit = gtk.MenuItem('Quit')
        self.app_menu_quit.connect('activate', self.quit)
        self.app_menu_quit.show()
        self.app_menu.append(self.app_menu_quit)
        self.app.set_menu(self.app_menu)

        self.update_label()

    def run(self):
        try:
            gtk.main()
        except KeyboardInterrupt:
            pass

    def quit(self, data=None):
        gtk.main_quit()

    def run_cmd(self, cmdlist):
        new_env = dict(os.environ)
        new_env['LC_ALL'] = 'C'
        try:
            stdout = subprocess.check_output(cmdlist, env=new_env)
        except subprocess.CalledProcessError:
            stdout = ""
        return stdout

    def run_dbus_method(self, bus_type, obj, path, interface, method, arg):
        if bus_type == "session":
            bus = dbus.SessionBus()
        elif bus_type == "system":
            bus = dbus.SystemBus()
        else:
            return None

        proxy = bus.get_object(obj, path)
        dbus_method = proxy.get_dbus_method(method, interface)

        return dbus_method(arg) if arg else dbus_method()

    def get_power_info(self):
        battery_path = None
        energy_rate = None
        voltage = None
        current = None
        on_battery = None

        for line in self.run_cmd(['upower', '-e']).decode().split('\n'):
            if 'battery_BAT' in line:
                battery_path = line
                break

        self.run_dbus_method('system', 'org.freedesktop.UPower',
                             battery_path, 'org.freedesktop.UPower.Device',
                             'Refresh', 'None')

        entries = self.run_cmd(['upower', '-i', battery_path])
        for entry in entries.decode().split('\n'):
            if ('state' in entry and
                entry.split(':')[1].strip() == 'discharging'):
                    on_battery = True
            if 'energy-rate' in entry:
                energy_rate = entry.split(':')[1].strip().split()[0]
                if not energy_rate or energy_rate == "0":
                    return "Can't get battery info"
            if 'voltage' in entry:
                voltage = entry.split(':')[1].strip().split()[0]
        try:
            current = round(1000 * float(energy_rate) / float(voltage), 4)
        except (ValueError, ZeroDivisionError):
            return "N/A"

        if on_battery:
            return {"W": float(energy_rate), "mA": current, "A": current / 1000}
        else:
            return "on AC"
    def update_label(self):
        info = self.get_power_info()

        if isinstance(info, str):
            label_text = info
        else:
            label_text = self.label_format.format(**info)

        self.app.set_label(label_text, "")
        glib.timeout_add_seconds(1, self.update_label)


def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter)
    pgroup = parser.add_mutually_exclusive_group()
    pgroup.set_defaults(format_str="{W:.2f} W")
    pgroup.add_argument("-W", "--Watt", dest="format_str",
                        action="store_const", const="{W:.2f} W",
                        help="display power in Watt (W) with 2 decimals")
    pgroup.add_argument("-A", "--Ampere", dest="format_str",
                        action="store_const", const="{A:.3f} A",
                        help="display current in Ampere (A) with 3 decimals")
    pgroup.add_argument("-a", "--Milliampere", dest="format_str",
                        action="store_const", const="{mA:.0f} mA",
                        help="display current in Milliampere (mA)")
    pgroup.add_argument("-f", "--format", dest="format_str",
                        action="store", metavar="FORMAT",
                        help="custom display format - see below...")
    parser.epilog = """FORMAT syntax:
    Use Python's "str.format()" syntax with named parameters.
    It looks basically like this:  {<NAME>:.<DECIMALS>f}
    <NAME> can be one of "W", "A" and "mA" and specifies the value you want.
    <DECIMALS> allows you to specify the number of decimals displayed.
    Here are the format strings of the default display options as example:
    -W :  "{W:.2f} W" ,    -A :  "{A:.3f} A" ,    -a :  "{mA:.0f} mA" """
    args = parser.parse_args()

    indicator = PowerFlowIndicator(args.format_str)

    signal.signal(signal.SIGINT,
                  lambda sig, frame: indicator.quit())

    indicator.run()


if __name__ == '__main__':
    main()
